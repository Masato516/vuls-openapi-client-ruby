=begin
#Future Vuls Public API

#Future Vuls Public API

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class CveListResponseBody
    # advisoryIDs of cve
    attr_accessor :advisory_ids

    # AllTaskCount of cve
    attr_accessor :all_task_count

    # created time
    attr_accessor :created_at

    # Cve ID string of cve
    attr_accessor :cve_id

    # cwes of cve
    attr_accessor :cwes

    # hasExploit of cve
    attr_accessor :has_exploit

    # hasMitigation of cve
    attr_accessor :has_mitigation

    # hasWorkaroundof cve
    attr_accessor :has_workaround

    # Flag of active cve
    attr_accessor :is_not_active

    # isOwaspTopTen2017 of cve
    attr_accessor :is_owasp_top_ten2017

    # maxV2 of cve
    attr_accessor :max_v2

    # maxV3 of cve
    attr_accessor :max_v3

    # NewTaskCount of cve
    attr_accessor :new_task_count

    # cvss v2 scores of cve
    attr_accessor :score_v2s

    # cvss v3 scores of cve
    attr_accessor :score_v3s

    # Title of cve
    attr_accessor :title

    # topicCount of cve
    attr_accessor :topic_count

    # topicLastUpdatedAt of cve
    attr_accessor :topic_last_updated_at

    # updated time
    attr_accessor :updated_at

    # cvss v2 vectors of cve
    attr_accessor :vector_v2s

    # cvss v3 vectors of cve
    attr_accessor :vector_v3s

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'advisory_ids' => :'advisoryIDs',
        :'all_task_count' => :'allTaskCount',
        :'created_at' => :'createdAt',
        :'cve_id' => :'cveID',
        :'cwes' => :'cwes',
        :'has_exploit' => :'hasExploit',
        :'has_mitigation' => :'hasMitigation',
        :'has_workaround' => :'hasWorkaround',
        :'is_not_active' => :'isNotActive',
        :'is_owasp_top_ten2017' => :'isOwaspTopTen2017',
        :'max_v2' => :'maxV2',
        :'max_v3' => :'maxV3',
        :'new_task_count' => :'newTaskCount',
        :'score_v2s' => :'scoreV2s',
        :'score_v3s' => :'scoreV3s',
        :'title' => :'title',
        :'topic_count' => :'topicCount',
        :'topic_last_updated_at' => :'topicLastUpdatedAt',
        :'updated_at' => :'updatedAt',
        :'vector_v2s' => :'vectorV2s',
        :'vector_v3s' => :'vectorV3s'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'advisory_ids' => :'Array<String>',
        :'all_task_count' => :'Integer',
        :'created_at' => :'Time',
        :'cve_id' => :'String',
        :'cwes' => :'Array<CweResponseBody>',
        :'has_exploit' => :'Boolean',
        :'has_mitigation' => :'Boolean',
        :'has_workaround' => :'Boolean',
        :'is_not_active' => :'Boolean',
        :'is_owasp_top_ten2017' => :'Boolean',
        :'max_v2' => :'Float',
        :'max_v3' => :'Float',
        :'new_task_count' => :'Integer',
        :'score_v2s' => :'Hash<String, Float>',
        :'score_v3s' => :'Hash<String, Float>',
        :'title' => :'String',
        :'topic_count' => :'Integer',
        :'topic_last_updated_at' => :'Time',
        :'updated_at' => :'Time',
        :'vector_v2s' => :'Hash<String, String>',
        :'vector_v3s' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CveListResponseBody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CveListResponseBody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'advisory_ids')
        if (value = attributes[:'advisory_ids']).is_a?(Array)
          self.advisory_ids = value
        end
      end

      if attributes.key?(:'all_task_count')
        self.all_task_count = attributes[:'all_task_count']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'cve_id')
        self.cve_id = attributes[:'cve_id']
      end

      if attributes.key?(:'cwes')
        if (value = attributes[:'cwes']).is_a?(Array)
          self.cwes = value
        end
      end

      if attributes.key?(:'has_exploit')
        self.has_exploit = attributes[:'has_exploit']
      end

      if attributes.key?(:'has_mitigation')
        self.has_mitigation = attributes[:'has_mitigation']
      end

      if attributes.key?(:'has_workaround')
        self.has_workaround = attributes[:'has_workaround']
      end

      if attributes.key?(:'is_not_active')
        self.is_not_active = attributes[:'is_not_active']
      end

      if attributes.key?(:'is_owasp_top_ten2017')
        self.is_owasp_top_ten2017 = attributes[:'is_owasp_top_ten2017']
      end

      if attributes.key?(:'max_v2')
        self.max_v2 = attributes[:'max_v2']
      end

      if attributes.key?(:'max_v3')
        self.max_v3 = attributes[:'max_v3']
      end

      if attributes.key?(:'new_task_count')
        self.new_task_count = attributes[:'new_task_count']
      end

      if attributes.key?(:'score_v2s')
        if (value = attributes[:'score_v2s']).is_a?(Hash)
          self.score_v2s = value
        end
      end

      if attributes.key?(:'score_v3s')
        if (value = attributes[:'score_v3s']).is_a?(Hash)
          self.score_v3s = value
        end
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'topic_count')
        self.topic_count = attributes[:'topic_count']
      end

      if attributes.key?(:'topic_last_updated_at')
        self.topic_last_updated_at = attributes[:'topic_last_updated_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'vector_v2s')
        if (value = attributes[:'vector_v2s']).is_a?(Hash)
          self.vector_v2s = value
        end
      end

      if attributes.key?(:'vector_v3s')
        if (value = attributes[:'vector_v3s']).is_a?(Hash)
          self.vector_v3s = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @all_task_count.nil?
        invalid_properties.push('invalid value for "all_task_count", all_task_count cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @cve_id.nil?
        invalid_properties.push('invalid value for "cve_id", cve_id cannot be nil.')
      end

      if @cwes.nil?
        invalid_properties.push('invalid value for "cwes", cwes cannot be nil.')
      end

      if @is_not_active.nil?
        invalid_properties.push('invalid value for "is_not_active", is_not_active cannot be nil.')
      end

      if @is_owasp_top_ten2017.nil?
        invalid_properties.push('invalid value for "is_owasp_top_ten2017", is_owasp_top_ten2017 cannot be nil.')
      end

      if @max_v2.nil?
        invalid_properties.push('invalid value for "max_v2", max_v2 cannot be nil.')
      end

      if @max_v3.nil?
        invalid_properties.push('invalid value for "max_v3", max_v3 cannot be nil.')
      end

      if @new_task_count.nil?
        invalid_properties.push('invalid value for "new_task_count", new_task_count cannot be nil.')
      end

      if @score_v2s.nil?
        invalid_properties.push('invalid value for "score_v2s", score_v2s cannot be nil.')
      end

      if @score_v3s.nil?
        invalid_properties.push('invalid value for "score_v3s", score_v3s cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @topic_count.nil?
        invalid_properties.push('invalid value for "topic_count", topic_count cannot be nil.')
      end

      if @topic_last_updated_at.nil?
        invalid_properties.push('invalid value for "topic_last_updated_at", topic_last_updated_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @vector_v2s.nil?
        invalid_properties.push('invalid value for "vector_v2s", vector_v2s cannot be nil.')
      end

      if @vector_v3s.nil?
        invalid_properties.push('invalid value for "vector_v3s", vector_v3s cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @all_task_count.nil?
      return false if @created_at.nil?
      return false if @cve_id.nil?
      return false if @cwes.nil?
      return false if @is_not_active.nil?
      return false if @is_owasp_top_ten2017.nil?
      return false if @max_v2.nil?
      return false if @max_v3.nil?
      return false if @new_task_count.nil?
      return false if @score_v2s.nil?
      return false if @score_v3s.nil?
      return false if @title.nil?
      return false if @topic_count.nil?
      return false if @topic_last_updated_at.nil?
      return false if @updated_at.nil?
      return false if @vector_v2s.nil?
      return false if @vector_v3s.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          advisory_ids == o.advisory_ids &&
          all_task_count == o.all_task_count &&
          created_at == o.created_at &&
          cve_id == o.cve_id &&
          cwes == o.cwes &&
          has_exploit == o.has_exploit &&
          has_mitigation == o.has_mitigation &&
          has_workaround == o.has_workaround &&
          is_not_active == o.is_not_active &&
          is_owasp_top_ten2017 == o.is_owasp_top_ten2017 &&
          max_v2 == o.max_v2 &&
          max_v3 == o.max_v3 &&
          new_task_count == o.new_task_count &&
          score_v2s == o.score_v2s &&
          score_v3s == o.score_v3s &&
          title == o.title &&
          topic_count == o.topic_count &&
          topic_last_updated_at == o.topic_last_updated_at &&
          updated_at == o.updated_at &&
          vector_v2s == o.vector_v2s &&
          vector_v3s == o.vector_v3s
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [advisory_ids, all_task_count, created_at, cve_id, cwes, has_exploit, has_mitigation, has_workaround, is_not_active, is_owasp_top_ten2017, max_v2, max_v3, new_task_count, score_v2s, score_v3s, title, topic_count, topic_last_updated_at, updated_at, vector_v2s, vector_v3s].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
