=begin
#Future Vuls Public API

#Future Vuls Public API

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class ServerCreatePkgPasteServerResponseBody
    # crated time of server
    attr_accessor :created_at

    # default user ID of server
    attr_accessor :default_user_id

    # default user name of server
    attr_accessor :default_user_name

    # UUID of server
    attr_accessor :host_uuid

    # ID of server
    attr_accessor :id

    # last scanned time of server
    attr_accessor :last_scanned_at

    # last uploaded time of server
    attr_accessor :last_uploaded_at

    # Whether server needs kernel restart
    attr_accessor :need_kernel_restart

    # OS Name of server
    attr_accessor :os_family

    # OS Version of server
    attr_accessor :os_version

    # platformInstanceId of server
    attr_accessor :platform_instance_id

    # platformName of server
    attr_accessor :platform_name

    # IPv4 of server
    attr_accessor :server_ipv4

    # Name of server
    attr_accessor :server_name

    # UUID of server
    attr_accessor :server_uuid

    # ID of server role
    attr_accessor :serverrole_id

    # Name of server role
    attr_accessor :serverrole_name

    # tags is list of server tag
    attr_accessor :tags

    # tasks of server
    attr_accessor :tasks

    # updated time of server
    attr_accessor :updated_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created_at' => :'createdAt',
        :'default_user_id' => :'defaultUserId',
        :'default_user_name' => :'defaultUserName',
        :'host_uuid' => :'hostUuid',
        :'id' => :'id',
        :'last_scanned_at' => :'lastScannedAt',
        :'last_uploaded_at' => :'lastUploadedAt',
        :'need_kernel_restart' => :'needKernelRestart',
        :'os_family' => :'osFamily',
        :'os_version' => :'osVersion',
        :'platform_instance_id' => :'platformInstanceId',
        :'platform_name' => :'platformName',
        :'server_ipv4' => :'serverIpv4',
        :'server_name' => :'serverName',
        :'server_uuid' => :'serverUuid',
        :'serverrole_id' => :'serverroleId',
        :'serverrole_name' => :'serverroleName',
        :'tags' => :'tags',
        :'tasks' => :'tasks',
        :'updated_at' => :'updatedAt'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'created_at' => :'String',
        :'default_user_id' => :'Integer',
        :'default_user_name' => :'String',
        :'host_uuid' => :'String',
        :'id' => :'Integer',
        :'last_scanned_at' => :'String',
        :'last_uploaded_at' => :'String',
        :'need_kernel_restart' => :'Boolean',
        :'os_family' => :'String',
        :'os_version' => :'String',
        :'platform_instance_id' => :'String',
        :'platform_name' => :'String',
        :'server_ipv4' => :'String',
        :'server_name' => :'String',
        :'server_uuid' => :'String',
        :'serverrole_id' => :'Integer',
        :'serverrole_name' => :'String',
        :'tags' => :'Array<ServerTagResponseBody>',
        :'tasks' => :'Array<ChildTaskResponseBody>',
        :'updated_at' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ServerCreatePkgPasteServerResponseBody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ServerCreatePkgPasteServerResponseBody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'default_user_id')
        self.default_user_id = attributes[:'default_user_id']
      end

      if attributes.key?(:'default_user_name')
        self.default_user_name = attributes[:'default_user_name']
      end

      if attributes.key?(:'host_uuid')
        self.host_uuid = attributes[:'host_uuid']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'last_scanned_at')
        self.last_scanned_at = attributes[:'last_scanned_at']
      end

      if attributes.key?(:'last_uploaded_at')
        self.last_uploaded_at = attributes[:'last_uploaded_at']
      end

      if attributes.key?(:'need_kernel_restart')
        self.need_kernel_restart = attributes[:'need_kernel_restart']
      end

      if attributes.key?(:'os_family')
        self.os_family = attributes[:'os_family']
      end

      if attributes.key?(:'os_version')
        self.os_version = attributes[:'os_version']
      end

      if attributes.key?(:'platform_instance_id')
        self.platform_instance_id = attributes[:'platform_instance_id']
      end

      if attributes.key?(:'platform_name')
        self.platform_name = attributes[:'platform_name']
      end

      if attributes.key?(:'server_ipv4')
        self.server_ipv4 = attributes[:'server_ipv4']
      end

      if attributes.key?(:'server_name')
        self.server_name = attributes[:'server_name']
      end

      if attributes.key?(:'server_uuid')
        self.server_uuid = attributes[:'server_uuid']
      end

      if attributes.key?(:'serverrole_id')
        self.serverrole_id = attributes[:'serverrole_id']
      end

      if attributes.key?(:'serverrole_name')
        self.serverrole_name = attributes[:'serverrole_name']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'tasks')
        if (value = attributes[:'tasks']).is_a?(Array)
          self.tasks = value
        end
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @host_uuid.nil?
        invalid_properties.push('invalid value for "host_uuid", host_uuid cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @need_kernel_restart.nil?
        invalid_properties.push('invalid value for "need_kernel_restart", need_kernel_restart cannot be nil.')
      end

      if @os_family.nil?
        invalid_properties.push('invalid value for "os_family", os_family cannot be nil.')
      end

      if @os_version.nil?
        invalid_properties.push('invalid value for "os_version", os_version cannot be nil.')
      end

      if @platform_instance_id.nil?
        invalid_properties.push('invalid value for "platform_instance_id", platform_instance_id cannot be nil.')
      end

      if @platform_name.nil?
        invalid_properties.push('invalid value for "platform_name", platform_name cannot be nil.')
      end

      if @server_ipv4.nil?
        invalid_properties.push('invalid value for "server_ipv4", server_ipv4 cannot be nil.')
      end

      if @server_name.nil?
        invalid_properties.push('invalid value for "server_name", server_name cannot be nil.')
      end

      if @server_uuid.nil?
        invalid_properties.push('invalid value for "server_uuid", server_uuid cannot be nil.')
      end

      if @serverrole_id.nil?
        invalid_properties.push('invalid value for "serverrole_id", serverrole_id cannot be nil.')
      end

      if @serverrole_name.nil?
        invalid_properties.push('invalid value for "serverrole_name", serverrole_name cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @created_at.nil?
      return false if @host_uuid.nil?
      return false if @id.nil?
      return false if @need_kernel_restart.nil?
      return false if @os_family.nil?
      return false if @os_version.nil?
      return false if @platform_instance_id.nil?
      return false if @platform_name.nil?
      return false if @server_ipv4.nil?
      return false if @server_name.nil?
      return false if @server_uuid.nil?
      return false if @serverrole_id.nil?
      return false if @serverrole_name.nil?
      return false if @updated_at.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_at == o.created_at &&
          default_user_id == o.default_user_id &&
          default_user_name == o.default_user_name &&
          host_uuid == o.host_uuid &&
          id == o.id &&
          last_scanned_at == o.last_scanned_at &&
          last_uploaded_at == o.last_uploaded_at &&
          need_kernel_restart == o.need_kernel_restart &&
          os_family == o.os_family &&
          os_version == o.os_version &&
          platform_instance_id == o.platform_instance_id &&
          platform_name == o.platform_name &&
          server_ipv4 == o.server_ipv4 &&
          server_name == o.server_name &&
          server_uuid == o.server_uuid &&
          serverrole_id == o.serverrole_id &&
          serverrole_name == o.serverrole_name &&
          tags == o.tags &&
          tasks == o.tasks &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [created_at, default_user_id, default_user_name, host_uuid, id, last_scanned_at, last_uploaded_at, need_kernel_restart, os_family, os_version, platform_instance_id, platform_name, server_ipv4, server_name, server_uuid, serverrole_id, serverrole_name, tags, tasks, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
