=begin
#Future Vuls Public API

#Future Vuls Public API

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class LockfileApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # addLockfile lockfile
    # add lockfile
    # @param add_lockfile_request_body [LockfileAddLockfileRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [LockfileAddLockfileResponseBody]
    def lockfile_add_lockfile(add_lockfile_request_body, opts = {})
      data, _status_code, _headers = lockfile_add_lockfile_with_http_info(add_lockfile_request_body, opts)
      data
    end

    # addLockfile lockfile
    # add lockfile
    # @param add_lockfile_request_body [LockfileAddLockfileRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [Array<(LockfileAddLockfileResponseBody, Integer, Hash)>] LockfileAddLockfileResponseBody data, response status code and response headers
    def lockfile_add_lockfile_with_http_info(add_lockfile_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LockfileApi.lockfile_add_lockfile ...'
      end
      # verify the required parameter 'add_lockfile_request_body' is set
      if @api_client.config.client_side_validation && add_lockfile_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_lockfile_request_body' when calling LockfileApi.lockfile_add_lockfile"
      end
      # resource path
      local_var_path = '/v1/lockfile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/gob'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_lockfile_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'LockfileAddLockfileResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"LockfileApi.lockfile_add_lockfile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LockfileApi#lockfile_add_lockfile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteLockfile lockfile
    # lockfile delete
    # @param lockfile_id [Integer] Lockfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [nil]
    def lockfile_delete_lockfile(lockfile_id, opts = {})
      lockfile_delete_lockfile_with_http_info(lockfile_id, opts)
      nil
    end

    # deleteLockfile lockfile
    # lockfile delete
    # @param lockfile_id [Integer] Lockfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def lockfile_delete_lockfile_with_http_info(lockfile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LockfileApi.lockfile_delete_lockfile ...'
      end
      # verify the required parameter 'lockfile_id' is set
      if @api_client.config.client_side_validation && lockfile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lockfile_id' when calling LockfileApi.lockfile_delete_lockfile"
      end
      # resource path
      local_var_path = '/v1/lockfile/{lockfileID}'.sub('{' + 'lockfileID' + '}', CGI.escape(lockfile_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"LockfileApi.lockfile_delete_lockfile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LockfileApi#lockfile_delete_lockfile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getLockfileDetail lockfile
    # lockfile detail
    # @param lockfile_id [Integer] Lockfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [LockfileGetLockfileDetailResponseBody]
    def lockfile_get_lockfile_detail(lockfile_id, opts = {})
      data, _status_code, _headers = lockfile_get_lockfile_detail_with_http_info(lockfile_id, opts)
      data
    end

    # getLockfileDetail lockfile
    # lockfile detail
    # @param lockfile_id [Integer] Lockfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [Array<(LockfileGetLockfileDetailResponseBody, Integer, Hash)>] LockfileGetLockfileDetailResponseBody data, response status code and response headers
    def lockfile_get_lockfile_detail_with_http_info(lockfile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LockfileApi.lockfile_get_lockfile_detail ...'
      end
      # verify the required parameter 'lockfile_id' is set
      if @api_client.config.client_side_validation && lockfile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lockfile_id' when calling LockfileApi.lockfile_get_lockfile_detail"
      end
      # resource path
      local_var_path = '/v1/lockfile/{lockfileID}'.sub('{' + 'lockfileID' + '}', CGI.escape(lockfile_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/gob'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LockfileGetLockfileDetailResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"LockfileApi.lockfile_get_lockfile_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LockfileApi#lockfile_get_lockfile_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getLockfileList lockfile
    # lockfile list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page Number (default to 1)
    # @option opts [Integer] :limit Limit (default to 20)
    # @option opts [Integer] :offset Offset (default to 0)
    # @option opts [Integer] :filter_server_id ServerID filter
    # @option opts [String] :filter_path Path filter
    # @option opts [String] :authorization api key auth
    # @return [LockfileGetLockfileListResponseBody]
    def lockfile_get_lockfile_list(opts = {})
      data, _status_code, _headers = lockfile_get_lockfile_list_with_http_info(opts)
      data
    end

    # getLockfileList lockfile
    # lockfile list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page Number (default to 1)
    # @option opts [Integer] :limit Limit (default to 20)
    # @option opts [Integer] :offset Offset (default to 0)
    # @option opts [Integer] :filter_server_id ServerID filter
    # @option opts [String] :filter_path Path filter
    # @option opts [String] :authorization api key auth
    # @return [Array<(LockfileGetLockfileListResponseBody, Integer, Hash)>] LockfileGetLockfileListResponseBody data, response status code and response headers
    def lockfile_get_lockfile_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LockfileApi.lockfile_get_lockfile_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling LockfileApi.lockfile_get_lockfile_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling LockfileApi.lockfile_get_lockfile_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling LockfileApi.lockfile_get_lockfile_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling LockfileApi.lockfile_get_lockfile_list, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/v1/lockfiles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'filterServerID'] = opts[:'filter_server_id'] if !opts[:'filter_server_id'].nil?
      query_params[:'filterPath'] = opts[:'filter_path'] if !opts[:'filter_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/gob'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LockfileGetLockfileListResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"LockfileApi.lockfile_get_lockfile_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LockfileApi#lockfile_get_lockfile_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateLockfile lockfile
    # update lockfile
    # @param lockfile_id [Integer] Lockfile ID
    # @param update_lockfile_request_body [LockfileUpdateLockfileRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [LockfileUpdateLockfileResponseBody]
    def lockfile_update_lockfile(lockfile_id, update_lockfile_request_body, opts = {})
      data, _status_code, _headers = lockfile_update_lockfile_with_http_info(lockfile_id, update_lockfile_request_body, opts)
      data
    end

    # updateLockfile lockfile
    # update lockfile
    # @param lockfile_id [Integer] Lockfile ID
    # @param update_lockfile_request_body [LockfileUpdateLockfileRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [Array<(LockfileUpdateLockfileResponseBody, Integer, Hash)>] LockfileUpdateLockfileResponseBody data, response status code and response headers
    def lockfile_update_lockfile_with_http_info(lockfile_id, update_lockfile_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LockfileApi.lockfile_update_lockfile ...'
      end
      # verify the required parameter 'lockfile_id' is set
      if @api_client.config.client_side_validation && lockfile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lockfile_id' when calling LockfileApi.lockfile_update_lockfile"
      end
      # verify the required parameter 'update_lockfile_request_body' is set
      if @api_client.config.client_side_validation && update_lockfile_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_lockfile_request_body' when calling LockfileApi.lockfile_update_lockfile"
      end
      # resource path
      local_var_path = '/v1/lockfile/{lockfileID}'.sub('{' + 'lockfileID' + '}', CGI.escape(lockfile_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/gob'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_lockfile_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'LockfileUpdateLockfileResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"LockfileApi.lockfile_update_lockfile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LockfileApi#lockfile_update_lockfile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
