=begin
#Future Vuls Public API

#Future Vuls Public API

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class RoleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # deleteRole role
    # role delete
    # @param role_id [Integer] Role ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [nil]
    def role_delete_role(role_id, opts = {})
      role_delete_role_with_http_info(role_id, opts)
      nil
    end

    # deleteRole role
    # role delete
    # @param role_id [Integer] Role ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def role_delete_role_with_http_info(role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleApi.role_delete_role ...'
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling RoleApi.role_delete_role"
      end
      # resource path
      local_var_path = '/v1/role/{roleID}'.sub('{' + 'roleID' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"RoleApi.role_delete_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleApi#role_delete_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getRoleDetail role
    # role detail
    # @param role_id [Integer] Role ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [RoleGetRoleDetailResponseBody]
    def role_get_role_detail(role_id, opts = {})
      data, _status_code, _headers = role_get_role_detail_with_http_info(role_id, opts)
      data
    end

    # getRoleDetail role
    # role detail
    # @param role_id [Integer] Role ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [Array<(RoleGetRoleDetailResponseBody, Integer, Hash)>] RoleGetRoleDetailResponseBody data, response status code and response headers
    def role_get_role_detail_with_http_info(role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleApi.role_get_role_detail ...'
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling RoleApi.role_get_role_detail"
      end
      # resource path
      local_var_path = '/v1/role/{roleID}'.sub('{' + 'roleID' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/gob'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RoleGetRoleDetailResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"RoleApi.role_get_role_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleApi#role_get_role_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getRoleList role
    # role list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page Number (default: 1) (default to 1)
    # @option opts [Integer] :limit Limit (default: 20, max: 100) (default to 20)
    # @option opts [Integer] :offset Offset (default to 0)
    # @option opts [String] :filter_cve_id CveID filter
    # @option opts [String] :authorization api key auth
    # @return [RoleGetRoleListResponseBody]
    def role_get_role_list(opts = {})
      data, _status_code, _headers = role_get_role_list_with_http_info(opts)
      data
    end

    # getRoleList role
    # role list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page Number (default: 1) (default to 1)
    # @option opts [Integer] :limit Limit (default: 20, max: 100) (default to 20)
    # @option opts [Integer] :offset Offset (default to 0)
    # @option opts [String] :filter_cve_id CveID filter
    # @option opts [String] :authorization api key auth
    # @return [Array<(RoleGetRoleListResponseBody, Integer, Hash)>] RoleGetRoleListResponseBody data, response status code and response headers
    def role_get_role_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleApi.role_get_role_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling RoleApi.role_get_role_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling RoleApi.role_get_role_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling RoleApi.role_get_role_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling RoleApi.role_get_role_list, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/v1/roles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'filterCveID'] = opts[:'filter_cve_id'] if !opts[:'filter_cve_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/gob'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RoleGetRoleListResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"RoleApi.role_get_role_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleApi#role_get_role_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateRole role
    # update role
    # @param role_id [Integer] Role ID
    # @param update_role_request_body [RoleUpdateRoleRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [RoleUpdateRoleResponseBody]
    def role_update_role(role_id, update_role_request_body, opts = {})
      data, _status_code, _headers = role_update_role_with_http_info(role_id, update_role_request_body, opts)
      data
    end

    # updateRole role
    # update role
    # @param role_id [Integer] Role ID
    # @param update_role_request_body [RoleUpdateRoleRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [Array<(RoleUpdateRoleResponseBody, Integer, Hash)>] RoleUpdateRoleResponseBody data, response status code and response headers
    def role_update_role_with_http_info(role_id, update_role_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleApi.role_update_role ...'
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling RoleApi.role_update_role"
      end
      # verify the required parameter 'update_role_request_body' is set
      if @api_client.config.client_side_validation && update_role_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_role_request_body' when calling RoleApi.role_update_role"
      end
      # resource path
      local_var_path = '/v1/role/{roleID}'.sub('{' + 'roleID' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/gob'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_role_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'RoleUpdateRoleResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"RoleApi.role_update_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleApi#role_update_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
