=begin
#Future Vuls Public API

#Future Vuls Public API

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class ServerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # createPkgPasteServer server
    # create paste server
    # @param create_pkg_paste_server_request_body [ServerCreatePkgPasteServerRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [ServerCreatePkgPasteServerResponseBody]
    def server_create_pkg_paste_server(create_pkg_paste_server_request_body, opts = {})
      data, _status_code, _headers = server_create_pkg_paste_server_with_http_info(create_pkg_paste_server_request_body, opts)
      data
    end

    # createPkgPasteServer server
    # create paste server
    # @param create_pkg_paste_server_request_body [ServerCreatePkgPasteServerRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [Array<(ServerCreatePkgPasteServerResponseBody, Integer, Hash)>] ServerCreatePkgPasteServerResponseBody data, response status code and response headers
    def server_create_pkg_paste_server_with_http_info(create_pkg_paste_server_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.server_create_pkg_paste_server ...'
      end
      # verify the required parameter 'create_pkg_paste_server_request_body' is set
      if @api_client.config.client_side_validation && create_pkg_paste_server_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_pkg_paste_server_request_body' when calling ServerApi.server_create_pkg_paste_server"
      end
      # resource path
      local_var_path = '/v1/server/paste'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/gob'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_pkg_paste_server_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServerCreatePkgPasteServerResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"ServerApi.server_create_pkg_paste_server",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#server_create_pkg_paste_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteServer server
    # server delete
    # @param server_id [Integer] Server ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [nil]
    def server_delete_server(server_id, opts = {})
      server_delete_server_with_http_info(server_id, opts)
      nil
    end

    # deleteServer server
    # server delete
    # @param server_id [Integer] Server ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def server_delete_server_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.server_delete_server ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServerApi.server_delete_server"
      end
      # resource path
      local_var_path = '/v1/server/{serverID}'.sub('{' + 'serverID' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"ServerApi.server_delete_server",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#server_delete_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getServerDetail server
    # server detail
    # @param server_id [Integer] Server ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [ServerGetServerDetailResponseBody]
    def server_get_server_detail(server_id, opts = {})
      data, _status_code, _headers = server_get_server_detail_with_http_info(server_id, opts)
      data
    end

    # getServerDetail server
    # server detail
    # @param server_id [Integer] Server ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [Array<(ServerGetServerDetailResponseBody, Integer, Hash)>] ServerGetServerDetailResponseBody data, response status code and response headers
    def server_get_server_detail_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.server_get_server_detail ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServerApi.server_get_server_detail"
      end
      # resource path
      local_var_path = '/v1/server/{serverID}'.sub('{' + 'serverID' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/gob'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServerGetServerDetailResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"ServerApi.server_get_server_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#server_get_server_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getServerDetailByUUID server
    # server detail by UUID
    # @param server_uuid [String] Server UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [ServerGetServerDetailByUUIDResponseBody]
    def server_get_server_detail_by_uuid(server_uuid, opts = {})
      data, _status_code, _headers = server_get_server_detail_by_uuid_with_http_info(server_uuid, opts)
      data
    end

    # getServerDetailByUUID server
    # server detail by UUID
    # @param server_uuid [String] Server UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [Array<(ServerGetServerDetailByUUIDResponseBody, Integer, Hash)>] ServerGetServerDetailByUUIDResponseBody data, response status code and response headers
    def server_get_server_detail_by_uuid_with_http_info(server_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.server_get_server_detail_by_uuid ...'
      end
      # verify the required parameter 'server_uuid' is set
      if @api_client.config.client_side_validation && server_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'server_uuid' when calling ServerApi.server_get_server_detail_by_uuid"
      end
      # resource path
      local_var_path = '/v1/server/uuid/{serverUuid}'.sub('{' + 'serverUuid' + '}', CGI.escape(server_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/gob'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServerGetServerDetailByUUIDResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"ServerApi.server_get_server_detail_by_uuid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#server_get_server_detail_by_uuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getServerList server
    # server list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page Number (default to 1)
    # @option opts [Integer] :limit Limit (default to 20)
    # @option opts [Integer] :offset Offset (default to 0)
    # @option opts [String] :filter_cve_id CveID filter
    # @option opts [Integer] :filter_role_id ServerRoleID filter
    # @option opts [String] :filter_tag_name ServerTagName filter
    # @option opts [String] :authorization api key auth
    # @return [ServerGetServerListResponseBody]
    def server_get_server_list(opts = {})
      data, _status_code, _headers = server_get_server_list_with_http_info(opts)
      data
    end

    # getServerList server
    # server list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page Number (default to 1)
    # @option opts [Integer] :limit Limit (default to 20)
    # @option opts [Integer] :offset Offset (default to 0)
    # @option opts [String] :filter_cve_id CveID filter
    # @option opts [Integer] :filter_role_id ServerRoleID filter
    # @option opts [String] :filter_tag_name ServerTagName filter
    # @option opts [String] :authorization api key auth
    # @return [Array<(ServerGetServerListResponseBody, Integer, Hash)>] ServerGetServerListResponseBody data, response status code and response headers
    def server_get_server_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.server_get_server_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ServerApi.server_get_server_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ServerApi.server_get_server_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ServerApi.server_get_server_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ServerApi.server_get_server_list, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'filter_role_id'].nil? && opts[:'filter_role_id'] < 1
        fail ArgumentError, 'invalid value for "opts[:"filter_role_id"]" when calling ServerApi.server_get_server_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v1/servers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'filterCveID'] = opts[:'filter_cve_id'] if !opts[:'filter_cve_id'].nil?
      query_params[:'filterRoleID'] = opts[:'filter_role_id'] if !opts[:'filter_role_id'].nil?
      query_params[:'filterTagName'] = opts[:'filter_tag_name'] if !opts[:'filter_tag_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/gob'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServerGetServerListResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"ServerApi.server_get_server_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#server_get_server_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updatePkgPasteServer server
    # update paste server
    # @param server_id [Integer] Server ID
    # @param update_pkg_paste_server_request_body [ServerUpdatePkgPasteServerRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [nil]
    def server_update_pkg_paste_server(server_id, update_pkg_paste_server_request_body, opts = {})
      server_update_pkg_paste_server_with_http_info(server_id, update_pkg_paste_server_request_body, opts)
      nil
    end

    # updatePkgPasteServer server
    # update paste server
    # @param server_id [Integer] Server ID
    # @param update_pkg_paste_server_request_body [ServerUpdatePkgPasteServerRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def server_update_pkg_paste_server_with_http_info(server_id, update_pkg_paste_server_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.server_update_pkg_paste_server ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServerApi.server_update_pkg_paste_server"
      end
      # verify the required parameter 'update_pkg_paste_server_request_body' is set
      if @api_client.config.client_side_validation && update_pkg_paste_server_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_pkg_paste_server_request_body' when calling ServerApi.server_update_pkg_paste_server"
      end
      # resource path
      local_var_path = '/v1/server/paste/{serverID}'.sub('{' + 'serverID' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_pkg_paste_server_request_body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"ServerApi.server_update_pkg_paste_server",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#server_update_pkg_paste_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateServer server
    # update server
    # @param server_id [Integer] Server ID
    # @param update_server_request_body [ServerUpdateServerRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [ServerUpdateServerResponseBody]
    def server_update_server(server_id, update_server_request_body, opts = {})
      data, _status_code, _headers = server_update_server_with_http_info(server_id, update_server_request_body, opts)
      data
    end

    # updateServer server
    # update server
    # @param server_id [Integer] Server ID
    # @param update_server_request_body [ServerUpdateServerRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization api key auth
    # @return [Array<(ServerUpdateServerResponseBody, Integer, Hash)>] ServerUpdateServerResponseBody data, response status code and response headers
    def server_update_server_with_http_info(server_id, update_server_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.server_update_server ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ServerApi.server_update_server"
      end
      # verify the required parameter 'update_server_request_body' is set
      if @api_client.config.client_side_validation && update_server_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_server_request_body' when calling ServerApi.server_update_server"
      end
      # resource path
      local_var_path = '/v1/server/{serverID}'.sub('{' + 'serverID' + '}', CGI.escape(server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/gob'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_server_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServerUpdateServerResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header_Authorization']

      new_options = opts.merge(
        :operation => :"ServerApi.server_update_server",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#server_update_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
